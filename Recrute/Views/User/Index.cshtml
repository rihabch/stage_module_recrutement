@model IEnumerable<Recrute.Models.User>

@{
    ViewBag.Title = "Liste des Utilisateurs";
}

<h2>Liste des Utilisateurs</h2>

<p>
    @Html.ActionLink("Créer Nouveau Utilisateur", "Create")
    @Html.ActionLink("Créer un Nouveau Administrateur", "CreateAdmin")
</p>
<!--
@if (Session["LogedUserFirstname"] != null && Session["LogedUserName"]!= null)
{
 <text>
  Welcome @Session["LogedUserFirstname"].ToString()  @Session["LogedUserName"].ToString()
 </text>

<table border="1">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.userName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.userFirstName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.email)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.password)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.DateOfBirth)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.nationality)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.placeOfBirth)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.famSituation)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.phoneNum)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.gsmNum)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.adress)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.city)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.country)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.codePoste)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.DateOfInscri)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.userName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.userFirstName)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.email)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.password)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.DateOfBirth)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.nationality)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.placeOfBirth)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.famSituation)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.phoneNum)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.gsmNum)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.adress)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.city)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.country)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.codePoste)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.DateOfInscri)
        </td>
        <td>
            @Html.ActionLink("Modifier", "Edit", new { id=item.userID }) |
            @Html.ActionLink("Détails", "Details", new { id=item.userID }) |
            @Html.ActionLink("Supprimer", "Delete", new { id=item.userID })
        </td>
    </tr>
}

</table>
}
    -->
@(Html.Kendo().Grid<Recrute.Models.User>()
    .Name("grid")
    .Columns(columns =>
    {
        columns.Bound(model => model.userID);
        columns.Bound(model => model.userName);
        columns.Bound(model => model.userFirstName).Width(100);
        columns.Bound(model => model.email).Width(100);
        columns.Bound(model => model.password).Width(100);
        columns.Command(command => { command.Edit(); command.Destroy(); }).Width(160);
    })
    .ToolBar(toolbar => toolbar.Create())
    .Editable(editable => editable.Mode(GridEditMode.PopUp))
    .Pageable()
    .Sortable()
    .Scrollable()
    .HtmlAttributes(new { style = "height:430px;" })
    .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(20)
        .Events(events => events.Error("error_handler"))
        .Model(model =>model.Id(mod => mod.userID))
        .Create(update => update.Action("EditingPopup_Create", "User"))
        .Read(read => read.Action("EditingPopup_Read", "User"))
        .Update(update => update.Action("EditingPopup_Update", "User"))
        .Destroy(update => update.Action("EditingPopup_Destroy", "User"))
    )
)
<script type="text/javascript">
    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }
</script>